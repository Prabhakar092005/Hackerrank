#include <stdio.h>
#include <stdlib.h>
#include <math.h>

long long min(long long a, long long b) {
    return (a < b) ? a : b;
}

long long queensAttack(int n, int k, int r_q, int c_q, int obstacles[][2]) {
    long long D_U = n - r_q;
    long long D_D = r_q - 1;
    long long D_R = n - c_q;
    long long D_L = c_q - 1;

    long long D_UR = min(n - r_q, n - c_q);
    long long D_DL = min(r_q - 1, c_q - 1);
    long long D_UL = min(n - r_q, c_q - 1);
    long long D_DR = min(r_q - 1, n - c_q);

    for (int i = 0; i < k; i++) {
        int r_o = obstacles[i][0];
        int c_o = obstacles[i][1];

        if (r_o == r_q) {
            if (c_o > c_q) {
                D_R = min(D_R, (long long)c_o - c_q - 1);
            } else {
                D_L = min(D_L, (long long)c_q - c_o - 1);
            }
        } else if (c_o == c_q) {
            if (r_o > r_q) {
                D_U = min(D_U, (long long)r_o - r_q - 1);
            } else {
                D_D = min(D_D, (long long)r_q - r_o - 1);
            }
        }
        
        if (abs(r_o - r_q) == abs(c_o - c_q)) {
            long long dist_to_obstacle = abs(r_o - r_q);
            long long attackable_squares = dist_to_obstacle - 1;

            if (r_o > r_q && c_o > c_q) {
                D_UR = min(D_UR, attackable_squares);
            } else if (r_o < r_q && c_o < c_q) {
                D_DL = min(D_DL, attackable_squares);
            } else if (r_o > r_q && c_o < c_q) {
                D_UL = min(D_UL, attackable_squares);
            } else {
                D_DR = min(D_DR, attackable_squares);
            }
        }
    }

    long long total_attacks = D_U + D_D + D_R + D_L + D_UR + D_DL + D_UL + D_DR;

    return total_attacks;
}

int main() {
    int n, k;
    
    if (scanf("%d %d", &n, &k) != 2) return 1;

    int r_q, c_q;
    
    if (scanf("%d %d", &r_q, &c_q) != 2) return 1;

    int obstacles[k][2];

    for (int i = 0; i < k; i++) {
        if (scanf("%d %d", &obstacles[i][0], &obstacles[i][1]) != 2) return 1;
    }

    long long result = queensAttack(n, k, r_q, c_q, obstacles);

    printf("%lld\n", result);

    return 0;
}
